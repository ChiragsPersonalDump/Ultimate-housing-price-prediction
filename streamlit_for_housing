import streamlit as st
import numpy as np
import pandas as pd
from sklearn.externals import joblib

# Load your trained model
model = joblib.load('final_forest_model.sav')

# Define the mapping for Ocean Proximity
ocean_proximity_mapping = {
    'Near Bay': [1, 0, 0, 0],
    'Near Ocean': [0, 1, 0, 0],
    '<1H Ocean': [0, 0, 1, 0],
    'Inland': [0, 0, 0, 1]
}

# Function to convert user input to encoded form
def get_encoded_ocean_proximity(user_input):
    return ocean_proximity_mapping.get(user_input, [0, 0, 0, 0])  # Default to all zeros if not found

# Streamlit UI
st.title('Housing Price Prediction')

# Sidebar with user input
st.sidebar.header('User Input')

# Collect user input
user_input_features = {
    'Longitude': st.sidebar.number_input('Longitude'),
    'Latitude': st.sidebar.number_input('Latitude'),
    'Housing Median Age': st.sidebar.number_input('Housing Median Age', min_value=0),
    'Total Rooms': st.sidebar.number_input('Total Rooms', min_value=0),
    'Total Bedrooms': st.sidebar.number_input('Total Bedrooms', min_value=0),
    'Population': st.sidebar.number_input('Population', min_value=0),
    'Households': st.sidebar.number_input('Households', min_value=0),
    'Median Income': st.sidebar.number_input('Median Income', min_value=0),
    'Ocean Proximity': st.sidebar.selectbox('Ocean Proximity', list(ocean_proximity_mapping.keys()))
}

# Convert user input to model-compatible format
encoded_ocean_proximity = get_encoded_ocean_proximity(user_input_features['Ocean Proximity'])
user_input = [
    user_input_features['Longitude'],
    user_input_features['Latitude'],
    user_input_features['Housing Median Age'],
    user_input_features['Total Rooms'],
    user_input_features['Total Bedrooms'],
    user_input_features['Population'],
    user_input_features['Households'],
    user_input_features['Median Income']
] + encoded_ocean_proximity

# Predict
prediction = model.predict([user_input])

# Display prediction
st.write(f'Predicted Housing Price: ${prediction[0]:,.2f}')
